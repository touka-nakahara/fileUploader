// Code generated by MockGen. DO NOT EDIT.
// Source: repository/file.go
//
// Generated by this command:
//
//	mockgen -source=repository/file.go -destination=./infra/mock/mock_file.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "fileUploader/model"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockFileRepository) Add(ctx context.Context, file *model.File, fileData *model.FileBlob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, file, fileData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockFileRepositoryMockRecorder) Add(ctx, file, fileData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFileRepository)(nil).Add), ctx, file, fileData)
}

// Delete mocks base method.
func (m *MockFileRepository) Delete(ctx context.Context, id model.FileID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFileRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockFileRepository) Get(ctx context.Context, id model.FileID) (*model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFileRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFileRepository)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockFileRepository) GetAll(ctx context.Context, params url.Values) ([]*model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, params)
	ret0, _ := ret[0].([]*model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockFileRepositoryMockRecorder) GetAll(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFileRepository)(nil).GetAll), ctx, params)
}

// GetData mocks base method.
func (m *MockFileRepository) GetData(ctx context.Context, id model.FileID) (*model.FileBlob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ctx, id)
	ret0, _ := ret[0].(*model.FileBlob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockFileRepositoryMockRecorder) GetData(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockFileRepository)(nil).GetData), ctx, id)
}

// Put mocks base method.
func (m *MockFileRepository) Put(ctx context.Context, id model.FileID, file *model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, id, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockFileRepositoryMockRecorder) Put(ctx, id, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockFileRepository)(nil).Put), ctx, id, file)
}
